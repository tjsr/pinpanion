/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get an event by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The event id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The event */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EventDto"];
                    };
                };
                /** @description Event not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{id}/pins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all pins for a pin group */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The pin group id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The pins in the pin group */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PinDto"][];
                    };
                };
                /** @description Pin group not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a pin group by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The pin group id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The pin group */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PinGroupDto"];
                    };
                };
                /** @description Pin group not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/item-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all item data */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The item data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ItemDataDto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pins/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a pin by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The pin id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The pin */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PinDto"];
                    };
                };
                /** @description Pin not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all pins */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All pins */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PinDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sets/{id}/pins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all pins for a set */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The set id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The pins in the set */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PinDto"][];
                    };
                };
                /** @description Set not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a set by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The set id */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The set */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SetDto"];
                    };
                };
                /** @description Set not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all sets */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All sets */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SetDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get API version */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description API version */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            version?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description A pin category */
        CategoryDto: {
            /** @description The category id */
            id: number;
            /** @description The category name */
            name: string;
            /**
             * @description The category type
             * @enum {string}
             */
            type: "CHARACTER" | "COMPANY" | "GAME" | "PERSON" | "SERIES" | "OTHER";
            /** @description Aliases for the category */
            aliases?: string[];
            /** @description The category's unique url slug */
            slug: string;
        };
        /** @description An event (e.g. a PAX) */
        EventDto: {
            /** @description The event id */
            id: number;
            /** @description The event name */
            name: string;
            /**
             * @description The event type
             * @enum {string}
             */
            type: "PAX" | "PAX_ONLINE";
            /**
             * @description The event sub type
             * @enum {string}
             */
            subType: "PAX_WEST" | "PAX_EAST" | "PAX_AUS" | "PAX_SOUTH" | "PAX_UNPLUGGED" | "PAX_ONLINE";
            /** @description The event colour hex code */
            colour?: string;
            /** @description The event year */
            year: number;
            /** @description The event start date (YYYY-MM-DD) */
            startDate: string;
            /** @description The event end date (YYYY-MM-DD) */
            endDate: string;
            /** @description The event timezone */
            timezone: string;
            /** @description The event start time (HH:MM:SS) */
            startTime: string;
            /** @description The event end time (HH:MM:SS) */
            endTime: string;
            /** @description Images for the event */
            images: components["schemas"]["ImageDto"][];
            /** @description The event's unique url slug */
            slug: string;
            /** @description The event start timestamp */
            startTimestamp: number;
            /** @description The event end timestamp */
            endTimestamp: string;
            /** @description Array of event infos */
            eventInfo: components["schemas"]["EventInfoDto"][];
        };
        /** @description An event summary */
        EventSummaryDto: {
            /** @description The event id */
            id: number;
            /** @description The event name */
            name: string;
            /**
             * @description The event type
             * @enum {string}
             */
            type: "PAX" | "PAX_ONLINE";
            /**
             * @description The event sub type
             * @enum {string}
             */
            subType: "PAX_WEST" | "PAX_EAST" | "PAX_AUS" | "PAX_SOUTH" | "PAX_UNPLUGGED" | "PAX_ONLINE";
            /** @description The event colour hex code */
            colour?: string;
            /** @description The event year */
            year: number;
            /** @description The event start date (YYYY-MM-DD) */
            startDate: string;
            /** @description The event end date (YYYY-MM-DD) */
            endDate: string;
            /** @description The primary image url for the event */
            imageUrl?: string;
            /** @description The event's unique url slug */
            slug: string;
            /** @description The event start timestamp */
            startTimestamp: number;
            /** @description The event end timestamp */
            endTimestamp: string;
            /** @description Array of event infos */
            eventInfo: components["schemas"]["EventInfoDto"][];
        };
        /** @description Additional info for an event */
        EventInfoDto: {
            /** @description The info text */
            name: string;
            /** @description The optional info url */
            url?: string;
            /** @description Array of child event infos */
            children: components["schemas"]["EventInfoDto"][];
        };
        /** @description An image */
        ImageDto: {
            /** @description The image id */
            id: number;
            /** @description Whether this is a primary image */
            primary: boolean;
            /** @description The image versions */
            versions: components["schemas"]["ImageVersionDto"][];
        };
        /** @description An image version */
        ImageVersionDto: {
            /** @description The image version id */
            id: number;
            /** @description The image width */
            width?: number;
            /** @description The image height */
            height?: number;
            /** @description The image mime type */
            mimeType: string;
            /**
             * @description The image version type
             * @enum {string}
             */
            versionType: "FULL" | "THUMBNAIL";
            /** @description The image version url */
            url: string;
        };
        /** @description Item data */
        ItemDataDto: {
            pins: components["schemas"]["PinSummaryDto"][];
            sets: components["schemas"]["SetSummaryDto"][];
            categories: components["schemas"]["CategoryDto"][];
            groups: components["schemas"]["PinGroupSummaryDto"][];
            events: components["schemas"]["EventSummaryDto"][];
        };
        /** @description A link related to an item */
        ItemLinkDto: {
            /** @description The link type */
            type: string;
            /** @description The link url */
            url: string;
        };
        /** @description A pin */
        PinDto: {
            /** @description The pin id */
            id: number;
            /** @description The pin name */
            name: string;
            /** @description The "main" year stamp for the pin */
            year: number;
            /** @description Any notes for the pin */
            notes?: string;
            /** @description Date that the pin was first released (YYYY-MM-DD) */
            released?: string;
            /** @description The id of the set that the pin belongs to */
            setId?: number;
            /** @description The id of the group that the pin belongs to */
            groupId?: number;
            /** @description The id of the event that the pin belongs to */
            eventId?: number;
            /** @description Any variant years for the pin */
            variantYears: number[];
            /** @description The ids of any categories that the pin belongs to */
            categoryIds: number[];
            /** @description Images of the pin */
            images: components["schemas"]["ImageDto"][];
            /** @description LE print run for this pin, if applicable */
            lePrintRun?: number;
            /** @description Advertised blind box odds for this pin, if applicable */
            blindBoxOdds?: string;
            /** @description Any links for the pin */
            links: components["schemas"]["ItemLinkDto"][];
        };
        /** @description Array of PinDto */
        PinDtoArray: components["schemas"]["PinDto"][];
        /** @description A pin */
        PinSummaryDto: {
            /** @description The pin id */
            id: number;
            /** @description The pin name */
            name: string;
            /** @description The "main" year stamp for the pin */
            year: number;
            /** @description Any notes for the pin */
            notes?: string;
            /** @description Date that the pin was first released (YYYY-MM-DD) */
            released?: string;
            /** @description The id of the set that the pin belongs to */
            setId?: number;
            /** @description The id of the group that the pin belongs to */
            groupId?: number;
            /** @description The id of the event that the pin belongs to */
            eventId?: number;
            /** @description Any variant years for the pin */
            variantYears: number[];
            /** @description The ids of any categories that the pin belongs to */
            categoryIds: number[];
            /** @description The primary image url for the pin */
            imageUrl?: string;
            /** @description LE print run for this pin, if applicable */
            lePrintRun?: number;
            /** @description Advertised blind box odds for this pin, if applicable */
            blindBoxOdds?: string;
            /** @description Any links for the pin */
            links: components["schemas"]["ItemLinkDto"][];
        };
        /** @description A pin group */
        PinGroupDto: {
            /** @description The pin group id */
            id: number;
            /** @description The pin group name */
            name: string;
            /** @description Any notes for the pin group */
            notes?: string;
            /**
             * @description The pin group type
             * @enum {string}
             */
            type: "STAFF" | "BLINDBOX" | "OTHER";
            /** @description Images of the pin group */
            images: components["schemas"]["ImageDto"][];
        };
        /** @description Array of PinGroupDto */
        PinGroupDtoArray: components["schemas"]["PinGroupDto"][];
        /** @description A pin group */
        PinGroupSummaryDto: {
            /** @description The pin group id */
            id: number;
            /** @description The pin group name */
            name: string;
            /** @description Any notes for the pin group */
            notes?: string;
            /**
             * @description The pin group type
             * @enum {string}
             */
            type: "STAFF" | "BLINDBOX" | "OTHER";
            /** @description The primary image url for the pin group */
            imageUrl?: string;
        };
        /** @description A set */
        SetDto: {
            /** @description The set id */
            id: number;
            /** @description The set name */
            name: string;
            /** @description Any notes for the set */
            notes?: string;
            /** @description Images of the set */
            images: components["schemas"]["ImageDto"][];
            /** @description Any links for the set */
            links: components["schemas"]["ItemLinkDto"][];
        };
        /** @description Array of SetDto */
        SetDtoArray: components["schemas"]["SetDto"][];
        /** @description A set */
        SetSummaryDto: {
            /** @description The set id */
            id: number;
            /** @description The set name */
            name: string;
            /** @description Any notes for the set */
            notes?: string;
            /** @description The primary image url for the set */
            imageUrl?: string;
            /** @description Any links for the pin */
            links: components["schemas"]["ItemLinkDto"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
